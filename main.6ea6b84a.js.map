{"version":3,"sources":["scripts/main.js"],"names":["Game2048","score","maxValueCell","field","rows","forEach","row","cells","cellTable","innerText","className","value","document","getElementsByClassName","buttonStart","gameScore","gameOver","gamePlay","blockKey","message","messageStart","messageWin","handlerKey","e","preventDefault","getScore","dataColumns","getDataColumns","dataRows","getDataRows","code","upDataColumns","calcColumnsUp","shiftLeft","reduce","prev","item","push","calculate","updateColumns","gameStatus","DownDataColumns","calcColumnsDown","reverse","leftdataRows","calcRowsLeft","updateRows","reverseData","calcRowsRight","newLoop","classList","add","innerHTML","getMaxValueCell","remove","Promise","resolve","empty","findAllEmptyCells","length","number","rundomNumber","cell","findRandomCell","endInsertNewValue","setTimeout","collumns","impossibleCalcRows","filter","join","impossibleCalcColumns","then","result","table","emptyCells","array","Math","floor","random","map","res","i","column","indexRow","indexCell","columns","resOut","arr","addEmptyCells","newArray","Array","fill","lines","line","flag","setData","addEventListener","start","prototype"],"mappings":"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","file":"main.6ea6b84a.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nclass Game2048 {\n  constructor() {\n    this.score = 0;\n    this.maxValueCell = 0;\n\n    [...field.rows].forEach((row) => {\n      [...row.cells].forEach((cellTable) => {\n        cellTable.innerText = '';\n        cellTable.className = 'field-cell';\n      });\n    });\n  }\n\n  get getMaxValueCell() {\n    return this.maxValueCell;\n  }\n\n  get getScore() {\n    return this.score;\n  }\n\n  set setData(value) {\n    if (value > this.maxValueCell) {\n      this.maxValueCell = value;\n    }\n\n    this.score += value;\n  }\n}\n\nconst field = document.getElementsByClassName('game-field')[0];\nconst buttonStart = document.getElementsByClassName('button start')[0];\nconst gameScore = document.getElementsByClassName('game-score')[0];\n\nlet gameOver = false;\nlet gamePlay = {};\nlet blockKey = false;\n\nconst message = document.getElementsByClassName('message message-lose')[0];\nconst messageStart = document.getElementsByClassName('message-start')[0];\nconst messageWin = document.getElementsByClassName('message-win')[0];\n\nbuttonStart.addEventListener('click', () => {\n  if (gamePlay !== {}) {\n    delete Game2048.gamePlay;\n  }\n  gamePlay = new Game2048();\n  gamePlay.start();\n});\n\nfunction handlerKey(e) {\n  e.preventDefault();\n  gameScore.innerText = gamePlay.getScore + '';\n\n  if (gameOver || blockKey) {\n    return;\n  }\n\n  const dataColumns = getDataColumns(field);\n  const dataRows = getDataRows(field);\n\n  switch (e.code) {\n    case 'ArrowUp':\n      blockKey = true;\n\n      const upDataColumns = shiftLeft(dataColumns);\n      const calcColumnsUp = upDataColumns.reduce((prev, item) => {\n        prev.push(calculate(item));\n\n        return prev;\n      }, []);\n\n      updateColumns(field, shiftLeft(calcColumnsUp));\n      gameStatus();\n      break;\n    case 'ArrowDown':\n      blockKey = true;\n\n      const DownDataColumns = (shiftLeft(reverse(dataColumns)));\n      const calcColumnsDown = DownDataColumns.reduce((prev, item) => {\n        prev.push(calculate(item));\n\n        return prev;\n      }, []);\n\n      updateColumns(field, reverse(shiftLeft(calcColumnsDown)));\n      gameStatus();\n      break;\n    case 'ArrowLeft':\n      blockKey = true;\n\n      const leftdataRows = shiftLeft(dataRows);\n      const calcRowsLeft = leftdataRows.reduce((prev, item) => {\n        prev.push(calculate(item));\n\n        return prev;\n      }, []);\n\n      updateRows(field, shiftLeft(calcRowsLeft));\n      gameStatus();\n      break;\n    case 'ArrowRight':\n      blockKey = true;\n\n      const reverseData = reverse(dataRows);\n      const rightDataRows = shiftLeft(reverseData);\n      const calcRowsRight = rightDataRows.reduce((prev, item) => {\n        prev.push(calculate(item));\n\n        return prev;\n      }, []);\n\n      updateRows(field, reverse(shiftLeft(calcRowsRight)));\n      gameStatus();\n      break;\n  }\n}\n\nfunction newLoop() {\n  buttonStart.classList.add('restart');\n  buttonStart.innerHTML = 'Restart';\n\n  if (gamePlay.getMaxValueCell === 2048) {\n    gameScore.innerText = gamePlay.getScore + '';\n    messageWin.classList.remove('hidden');\n\n    return new Promise(resolve => resolve(true));\n  }\n\n  let empty = findAllEmptyCells(field);\n  let endInsertNewValue;\n\n  if (empty.length !== 0) {\n    const number = rundomNumber();\n    const cell = findRandomCell(empty);\n\n    endInsertNewValue = new Promise(resolve => setTimeout(() => {\n      cell.innerText = number;\n      cell.className = `field-cell field-cell--${number}`;\n      empty = findAllEmptyCells(field);\n\n      if (empty.length === 0) {\n        const rows = getDataRows(field);\n        const collumns = getDataColumns(field);\n\n        const impossibleCalcRows = rows.filter(item =>\n          item.join('') !== calculate(item).join(''));\n        const impossibleCalcColumns = collumns.filter(item =>\n          item.join('') !== calculate(item).join(''));\n\n        if (!impossibleCalcRows.length && !impossibleCalcColumns.length) {\n          message.classList.remove('hidden');\n\n          resolve(true);\n        }\n      }\n\n      resolve(false);\n    }, 0));\n  } else {\n    return new Promise(resolve => resolve(false));\n  }\n\n  return endInsertNewValue;\n}\n\nfunction gameStatus() {\n  newLoop().then((result) => {\n    blockKey = false;\n    gameOver = result;\n  });\n}\n\nfunction findAllEmptyCells(table) {\n  const emptyCells = [];\n\n  [...table.rows].forEach((row) => {\n    [...row.cells].forEach((cell) => {\n      if (cell.innerText === '') {\n        emptyCells.push(cell);\n      }\n    });\n  });\n\n  return emptyCells;\n}\n\nfunction findRandomCell(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nfunction rundomNumber() {\n  return Math.random() <= 0.1 ? 4 : 2;\n}\n\nfunction getDataRows(table) {\n  const result = [];\n\n  for (const row of table.rows) {\n    result.push([...row.cells].map((item) => {\n      return item.innerText === '' ? '0' : item.innerText;\n    }));\n  }\n\n  return result;\n}\n\nfunction getDataColumns(table) {\n  const res = [];\n\n  for (let i = 0; i < [...table.rows[0].cells].length; i++) {\n    const column = [];\n\n    for (const row of table.rows) {\n      row.cells[i].innerText === ''\n        ? column.push('0')\n        : column.push(row.cells[i].innerText);\n    }\n    res.push(column);\n  }\n\n  return res;\n}\n\nfunction updateRows(table, rows) {\n  rows.forEach((row, indexRow) => {\n    row.forEach((cell, indexCell) => {\n      cell === '0'\n        ? table.rows[indexRow].cells[indexCell].innerText = ''\n        : table.rows[indexRow].cells[indexCell].innerText = cell;\n\n      cell === '0'\n        ? table.rows[indexRow].cells[indexCell].className = 'field-cell'\n        : table.rows[indexRow].cells[indexCell].className = `\n        field-cell field-cell--${+cell}`;\n    });\n  });\n}\n\nfunction updateColumns(table, columns) {\n  [...table.rows].forEach((row, indexRow) => {\n    [...row.cells].forEach((cell, indexCell) => {\n      columns[indexCell][indexRow] === '0'\n        ? cell.innerText = ''\n        : cell.innerText = columns[indexCell][indexRow];\n\n      columns[indexCell][indexRow] === '0'\n        ? cell.className = 'field-cell'\n        : cell.className = `\n        field-cell field-cell--${+columns[indexCell][indexRow]}`;\n    });\n  });\n}\n\nfunction shiftLeft(rows) {\n  const resOut = [];\n\n  for (const row of rows) {\n    const result = row.reduce((prev, item) => {\n      if (item !== '0') {\n        prev.push(item);\n\n        return prev;\n      }\n\n      return prev;\n    }, []);\n\n    let arr = [];\n\n    if (result.length < row.length) {\n      const addEmptyCells = row.length - result.length;\n      const newArray = Array(addEmptyCells).fill('0');\n\n      arr = [...result, ...newArray];\n\n      resOut.push(arr);\n    } else {\n      resOut.push(result);\n    }\n  }\n\n  return resOut;\n}\n\nfunction reverse(lines) {\n  return lines.reduce((prev, line) => {\n    prev.push(line.reverse());\n\n    return prev;\n  }, []);\n}\n\nfunction calculate(array) {\n  let flag = false;\n  const result = array;\n\n  do {\n    for (let i = 1; i < result.length; i++) {\n      if (result[i - 1] === result[i]) {\n        result[i - 1] = +result[i] * 2 + '';\n        gamePlay.setData = +result[i - 1];\n        result[i] = '0';\n        flag = true;\n      }\n    }\n    flag = false;\n  } while (flag);\n\n  return result;\n}\n\nGame2048.prototype.start = function() {\n  gameOver = false;\n  this.score = 0;\n  this.maxValueCell = 0;\n  gameScore.innerText = this.score + '';\n  message.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  messageStart.classList.add('hidden');\n\n  for (let i = 0; i < 2; i++) {\n    const emptyCells = findAllEmptyCells(field);\n    const number = rundomNumber();\n    const cell = findRandomCell(emptyCells);\n\n    cell.innerText = number;\n    cell.className = `field-cell field-cell--${number}`;\n  }\n  document.addEventListener('keydown', handlerKey);\n};\n"]}